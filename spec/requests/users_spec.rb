# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users' do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      username: 'joea',
      email: 'joe.armstrong@erlang.org',
      password: 'secret',
      password_confirmation: 'secret'
    }
  end

  let(:invalid_attributes) do
    {
      username: nil,
      email: nil,
      password: nil,
      password_confirmation: nil
    }
  end

  describe 'GET /index' do
    let(:user) { create(:user) }

    it 'renders a successful response' do
      User.create! valid_attributes
      get users_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    let(:user) { create(:user) }

    it 'renders a successful response' do
      get user_url(user)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    context 'without logged in user' do
      it 'renders a 403 response' do
        get new_user_url
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in user' do
      include_context 'with logged in user'

      it 'renders a 403 response' do
        get new_user_url
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in admin' do
      include_context 'with logged in admin'

      it 'renders a successful response' do
        get new_user_url
        expect(response).to be_successful
      end
    end
  end

  describe 'GET /edit' do
    context 'without logged in user' do
      let(:user) { create(:user) }

      it 'renders a 403 response' do
        get edit_user_url(user)
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in user, editing herself' do
      include_context 'with logged in user'

      it 'renders a successful response' do
        get edit_user_url(current_user)
        expect(response).to be_successful
      end
    end

    context 'with logged in user, editing another user' do
      include_context 'with logged in user'
      let(:user) { create(:user) }

      it 'renders a 403 response' do
        get edit_user_url(user)
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in admin' do
      include_context 'with logged in admin'
      let(:user) { create(:user) }

      it 'renders a successful response' do
        get edit_user_url(user)
        expect(response).to be_successful
      end
    end
  end

  describe 'POST /create' do
    context 'without logged in user' do
      it 'renders a 403 response' do
        post users_url, params: { user: valid_attributes }
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in user' do
      include_context 'with logged in user'

      it 'renders a 403 response' do
        post users_url, params: { user: valid_attributes }
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in admin and valid parameters' do
      include_context 'with logged in admin'

      it 'creates a new User' do
        expect do
          post users_url, params: { user: valid_attributes }
        end.to change(User, :count).by(1)
      end

      it 'redirects to the created user' do
        post users_url, params: { user: valid_attributes }
        expect(response).to redirect_to(user_url(User.last))
      end

      it 'sets the session[:user_id] to the created user id' do
        post users_url, params: { user: valid_attributes }
        expect(session[:user_id]).to eq(User.last.id)
      end
    end

    context 'with logged in admin and invalid parameters' do
      include_context 'with logged in admin'

      it 'does not create a new User' do
        expect do
          post users_url, params: { user: invalid_attributes }
        end.not_to change(User, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post users_url, params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe 'PATCH /update' do
    let(:user) { create(:user) }
    let(:new_attributes) do
      { name: 'Joe Armstrong' }
    end

    context 'without logged in user' do
      it 'renders a 403 response' do
        patch user_url(user), params: { user: valid_attributes }
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in user, updating herself' do
      include_context 'with logged in user'
      let(:user) { current_user }

      it 'updates the requested user' do
        patch user_url(user), params: { user: new_attributes }
        user.reload
        expect(user.name).to eq('Joe Armstrong')
      end
    end

    context 'with logged in user, updating another user' do
      include_context 'with logged in user'

      it 'renders a 403 response' do
        patch user_url(user), params: { user: new_attributes }
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in admin and valid parameters' do
      include_context 'with logged in admin'

      it 'updates the requested user' do
        patch user_url(user), params: { user: new_attributes }
        user.reload
        expect(user.name).to eq('Joe Armstrong')
      end

      it 'redirects to the user' do
        patch user_url(user), params: { user: new_attributes }
        user.reload
        expect(response).to redirect_to(user_url(user))
      end
    end

    context 'with logged in admin and invalid parameters' do
      include_context 'with logged in admin'

      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch user_url(user), params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe 'DELETE /destroy' do
    context 'without logged in user' do
      let(:user) { create(:user) }

      it 'renders a 403 response' do
        delete user_url(user)
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in user' do
      include_context 'with logged in user'
      let(:user) { create(:user) }

      it 'renders a 403 response' do
        delete user_url(user)
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with logged in admin' do
      include_context 'with logged in admin'
      let(:user) { create(:user) }

      it 'destroys the requested user' do
        delete user_url(user)
        expect(User.find_by(id: user.id)).to be_nil
      end

      it 'redirects to the users list' do
        delete user_url(user)
        expect(response).to redirect_to(users_url)
      end
    end
  end
end
